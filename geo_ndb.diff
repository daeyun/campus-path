Index: geo/geomodel_test.py
===================================================================
--- geo/geomodel_test.py	(revision 0)
+++ geo/geomodel_test.py	(revision 0)
@@ -0,0 +1,177 @@
+#!/usr/bin/python2.5
+#
+# Copyright 2009 Roman Nurik
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+"""Unit tests for geomodel.py."""
+
+import os
+import sys
+# Hardcoded Path to SDK.
+gae_path = '/usr/local/google_appengine'
+sys.path[0:0] = [
+    # Minimum SDK libs required.
+    gae_path,
+    os.path.join(gae_path, 'lib', 'yaml', 'lib'),
+]
+
+import unittest
+
+from google.appengine.ext import ndb
+from google.appengine.ext import testbed
+
+import geomodel
+import geotypes
+
+
+# Borrowed from the demo.
+class PublicSchool(geomodel.GeoModel, ndb.Model):
+  """A location-aware model for public school entities.
+
+  See http://nces.ed.gov/ccd/psadd.asp for details on attributes.
+  """
+  school_id = ndb.StringProperty()
+  name = ndb.StringProperty()
+  address = ndb.StringProperty()
+  city = ndb.StringProperty()
+  state = ndb.StringProperty()
+  zip_code = ndb.IntegerProperty()
+  enrollment = ndb.IntegerProperty()
+  phone_number = ndb.StringProperty()
+  locale_code = ndb.IntegerProperty()
+  school_type = ndb.IntegerProperty()
+  school_level = ndb.IntegerProperty()
+  grades_taught = ndb.IntegerProperty(repeated=True)
+
+  @staticmethod
+  def public_attributes():
+    """Returns a set of simple attributes on public school entities."""
+    return [
+      'school_id', 'name', 'address', 'city', 'state', 'zip_code',
+      'enrollment', 'phone_number', 'locale_code', 'school_type', 'school_level'
+    ]
+
+  def _get_latitude(self):
+    return self.location.lat if self.location else None
+
+  def _set_latitude(self, lat):
+    if not self.location:
+      self.location = ndb.GeoPt()
+
+    self.location.lat = lat
+
+  latitude = property(_get_latitude, _set_latitude)
+
+  def _get_longitude(self):
+    return self.location.lon if self.location else None
+
+  def _set_longitude(self, lon):
+    if not self.location:
+      self.location = ndb.GeoPt()
+
+    self.location.lon = lon
+
+  longitude = property(_get_longitude, _set_longitude)
+
+
+class AppTest(unittest.TestCase):
+  """Base class for tests that use App Engine services."""
+
+  APP_ID = '_'
+
+  def setUp(self):
+    self.testbed = testbed.Testbed()
+    self.testbed.setup_env(app_id=self.APP_ID)
+    self.testbed.activate()
+    self.testbed.init_datastore_v3_stub()
+    self.testbed.init_memcache_stub()
+
+  def tearDown(self):
+    self.testbed.deactivate()
+
+
+def _populate_db():
+  data = """390000104683,OHIO SCHOOL FOR THE DEAF,500 MORSE RD,COLUMBUS,OH,43214,1833,18,(614) 728-1424,11,2,2,06,08,1,40.064882,-83.004279,9
+390000204684,STATE SCHOOL FOR THE BLIND,5220 N HIGH ST,COLUMBUS,OH,43214,1240,80,(614) 752-1359,11,2,3,07,12,1,40.069993,-83.007824,9
+390001701509,YOUNGSTOWN COMMUNITY SCHOOL,50 ESSEX ST,YOUNGSTOWN,OH,44502,1838,321,(330) 746-2240,13,1,1,KG,06,1,41.090543,-80.658638,9
+390001801513,EAGLE HEIGHTS ACADEMY,1833 MARKET ST,YOUNGSTOWN,OH,44507,1137,719,(330) 742-9090,13,1,1,KG,08,1,41.081567,-80.655892,9
+390001901514,CONSTELLATION SCHOOLS: OLD BROOKLYN COMMUNITY ELEM,4430 STATE RD,CLEVELAND,OH,44109,4705,274,(216) 661-7888,11,1,1,KG,04,1,41.433879,-81.707919,9
+390002001515,HARMONY COMMUNITY SCHOOL,1580 SUMMIT RD,CINCINNATI,OH,45237,1917,-2,(513) 921-5260,11,1,N,07,12,2,39.20326,-84.464114,9
+590010500138,SHERMAN INDIAN HIGH SCHOOL,9010 MAGNOLIA AVE,RIVERSIDE,CA,92503,,330,(951) 276-6326,N,1,3,09,12,1,33.925504,-117.437367,9
+590019700136,NOLI SCHOOL,PO BOX 700,SAN JACINTO,CA,92581,,129,(951) 654-5596,N,1,4,06,12,1,33.784426,-116.958389,9"""
+
+  props = ['school_id', 'name', 'address', 'city', 'state', 'zip_code',
+    '_dummy', 'enrollment', 'phone_number', 'locale_code', 'school_type',
+    'school_level', '_dummy', '_dummy', '_dummy', 'lat', 'lon',
+    'accuracy']
+
+  for line in data.splitlines():
+    record = dict(zip(props, line.split(',')))
+    record.pop('_dummy')
+    record.pop('accuracy')
+    record['location'] = ndb.GeoPt(float(record.pop('lat')),
+                                   float(record.pop('lon')))
+
+    for key in ['zip_code', 'enrollment', 'locale_code',
+                'school_type', 'school_level']:
+      try:
+        record[key] = int(record[key])
+      except:
+        record.pop(key)
+
+    school = PublicSchool(**record)
+    school.update_location()
+    school.put()
+
+
+class GeomodelTests(AppTest):
+  def test_geo(self):
+    _populate_db()
+
+    results = PublicSchool.bounding_box_fetch(
+      PublicSchool.query().order(PublicSchool.school_id),
+      geotypes.Box(39, -82, 41, -84),
+      max_results=10)
+    self.assertEqual(len(results), 2)
+    self.assertEqual(results[0].school_id, '390000104683')
+    self.assertEqual(results[1].school_id, '390000204684')
+
+    results = PublicSchool.bounding_box_fetch(
+      PublicSchool.query().order(PublicSchool.school_id),
+      geotypes.Box(38, -83, 40, -85),
+      max_results=10)
+    self.assertEqual(len(results), 1)
+    self.assertEqual(results[0].school_id, '390002001515')
+
+    results = PublicSchool.proximity_fetch(
+      PublicSchool.query(),
+      geotypes.Point(40, -83),
+      max_results=10,
+      max_distance=50000) # Within 50km.
+    self.assertEqual(len(results), 2)
+    self.assertEqual(results[0].school_id, '390000104683')
+    self.assertEqual(results[1].school_id, '390000204684')
+
+    results = PublicSchool.proximity_fetch(
+      PublicSchool.query(),
+      geotypes.Point(34, -117),
+      max_results=10,
+      max_distance=50000) # Within 50km.
+    self.assertEqual(len(results), 2)
+    self.assertEqual(results[0].school_id, '590019700136')
+    self.assertEqual(results[1].school_id, '590010500138')
+
+
+if __name__ == '__main__':
+  unittest.main()

Property changes on: geo/geomodel_test.py
___________________________________________________________________
Added: svn:executable
   + *

Index: geo/geomodel.py
===================================================================
--- geo/geomodel.py	(revision 25)
+++ geo/geomodel.py	(working copy)
@@ -22,12 +22,11 @@
 
 __author__ = 'api.roman.public@gmail.com (Roman Nurik)'
 
-import copy
 import logging
 import math
 import sys
 
-from google.appengine.ext import db
+from google.appengine.ext import ndb
 
 import geocell
 import geomath
@@ -35,22 +34,23 @@
 import util
 
 DEBUG = False
+if DEBUG:
+    logging.getLogger().setLevel(logging.INFO)
 
-
 def default_cost_function(num_cells, resolution):
   """The default cost function, used if none is provided by the developer."""
   return 1e10000 if num_cells > pow(geocell._GEOCELL_GRID_SIZE, 2) else 0
 
 
-class GeoModel(db.Model):
-  """A base model class for single-point geographically located entities.
+class GeoModel(object):
+  """A model mixin for single-point geographically located entities.
 
   Attributes:
     location: A db.GeoPt that defines the single geographic point
         associated with this entity.
   """
-  location = db.GeoPtProperty()
-  location_geocells = db.StringListProperty()
+  location = ndb.GeoPtProperty()
+  location_geocells = ndb.StringProperty(repeated=True)
 
   def update_location(self):
     """Syncs underlying geocell properties with the entity's location.
@@ -66,8 +66,8 @@
     else:
       self.location_geocells = []
 
-  @staticmethod
-  def bounding_box_fetch(query, bbox, max_results=1000,
+  @classmethod
+  def bounding_box_fetch(cls, query, bbox, max_results=1000,
                          cost_function=None):
     """Performs a bounding box fetch on the given query.
 
@@ -101,7 +101,7 @@
     query_geocells = geocell.best_bbox_search_cells(bbox, cost_function)
 
     if query_geocells:
-      for entity in query.filter('location_geocells IN', query_geocells):
+      for entity in query.filter(cls.location_geocells.IN(query_geocells)):
         if len(results) == max_results:
           break
         if (entity.location.lat >= bbox.south and
@@ -115,8 +115,9 @@
 
     return results
 
-  @staticmethod
-  def proximity_fetch(query, center, max_results=10, max_distance=0):
+
+  @classmethod
+  def proximity_fetch(cls, query, center, max_results=10, max_distance=0):
     """Performs a proximity/radius fetch on the given query.
 
     Fetches at most <max_results> entities matching the given query,
@@ -169,7 +170,7 @@
     def _merge_results_in_place(a, b):
       util.merge_in_place(a, b,
                         cmp_fn=lambda x, y: cmp(x[1], y[1]),
-                        dup_fn=lambda x, y: x[0].key() == y[0].key())
+                        dup_fn=lambda x, y: x[0].key == y[0].key)
 
     sorted_edges = [(0,0)]
     sorted_edge_distances = [0]
@@ -183,8 +184,7 @@
 
       # Run query on the next set of geocells.
       cur_resolution = len(cur_geocells[0])
-      temp_query = copy.deepcopy(query)  # TODO(romannurik): is this safe?
-      temp_query.filter('location_geocells IN', cur_geocells_unique)
+      temp_query = query.filter(cls.location_geocells.IN(cur_geocells_unique))
 
       # Update results and sort.
       new_results = temp_query.fetch(1000)
